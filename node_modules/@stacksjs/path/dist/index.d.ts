import * as _path from 'path';
import { normalizeString } from 'pathe';
export { basename, delimiter, dirname, extname, format, isAbsolute, join, normalize, normalizeString, parse, relative, resolve, sep, toNamespacedPath } from 'pathe';

/**
 * Returns the path to the `ai` directory. The AI directory
 * contains the core Stacks' AI logic which currently
 * is a wrapper of the OpenAI API.
 *
 * @param path - relative path to the file or directory
 * @returns string - absolute path to the file or directory
 *
 * @example
 * ```ts
 * import { aiPath } from '@stacks/paths'
 *
 * console.log('path is', aiPath())
 * // path is /Users/chrisbreuer/Code/stacks/.stacks/core/ai
 * ```
 */
declare function aiPath(path?: string): string;
/**
 * Returns the path to the `actions` directory. The actions directory
 * contains the core Stacks' actions. An action
 *
 * @param path - relative path to the file or directory
 * @returns string - absolute path to the file or directory
 * @example
 * ```ts
 * import { buildPath } from '@stacks/paths'
 *
 * buildPath('functions.vue')
 * buildPath('any-path.ts')
 * ```
 */
declare function actionsPath(path?: string): string;
declare function aliasPath(): string;
declare function runtimePath(path?: string): string;
declare function arraysPath(path?: string): string;
declare function authPath(path?: string): string;
declare function appPath(path?: string): string;
/**
 * Returns the path to the build directory. The build directory
 * contains Stacks' build engine & its tooling integrations.
 *
 * @param path string - relative path to the file or directory
 * @returns string - absolute path to the file or directory
 * @example
 * ```ts
 * buildPath('functions.vue')
 * buildPath('vue-components.ts')
 * ```
 */
declare function buildPath(path?: string): string;
declare function buildEnginePath(path?: string): string;
declare function buildEntriesPath(path?: string): string;
declare function cachePath(path?: string): string;
declare function chatPath(path?: string): string;
declare function cliPath(path?: string): string;
declare function cloudPath(path?: string): string;
declare function collectionsPath(path?: string): string;
declare function componentsPath(path?: string): string;
declare function configPath(path?: string): string;
declare function userConfigPath(path?: string): string;
declare function corePath(path?: string): string;
declare function dashboardPath(path?: string): string;
declare function databasePath(path?: string): string;
declare function developmentPath(path?: string): string;
declare function desktopPath(path?: string): string;
declare function docsPath(path?: string): string;
declare function domainsPath(path?: string): string;
declare function customElementsDataPath(): string;
declare function emailPath(path?: string): string;
declare function errorHandlingPath(path?: string): string;
declare function eventsPath(path?: string): string;
declare function fakerPath(path?: string): string;
declare function healthPath(path?: string): string;
declare function examplesPath(type: 'vue-components' | 'web-components'): string;
declare function frameworkPath(path?: string): string;
declare function storagePath(path?: string): string;
declare function functionsPath(path?: string): string;
declare function gitPath(path?: string): string;
declare function langPath(path?: string): string;
declare function libraryEntryPath(type: 'vue-components' | 'web-components' | 'functions'): string;
declare function lintPath(path?: string): string;
declare function loggingPath(path?: string): string;
declare function xRayPath(path?: string): string;
declare function modelsPath(path?: string): string;
declare function modulesPath(path?: string): string;
declare function notificationsPath(path?: string): string;
declare function ormPath(path?: string): string;
declare function objectsPath(path?: string): string;
declare function onboardingPath(path?: string): string;
declare function packageJsonPath(type: 'vue-components' | 'web-components' | 'functions'): string;
declare function pagesPath(path?: string): string;
declare function pathPath(path?: string): string;
declare function paymentsPath(path?: string): string;
declare function projectPath(filePath?: string): string;
declare function pushPath(path?: string): string;
declare function queryBuilderPath(path?: string): string;
declare function queuePath(path?: string): string;
declare function realtimePath(path?: string): string;
declare function routerPath(path?: string): string;
declare function searchEnginePath(path?: string): string;
declare function settingsPath(path?: string): string;
declare function smsPath(path?: string): string;
declare function schedulerPath(path?: string): string;
declare function signalsPath(path?: string): string;
declare function routesPath(path?: string): string;
declare function securityPath(path?: string): string;
declare function serverPath(path?: string): string;
declare function serverlessPath(path?: string): string;
declare function stacksPath(path?: string): string;
declare function tablesPath(path?: string): string;
declare function testingPath(path?: string): string;
declare function testsPath(path?: string): string;
declare function typesPath(path?: string): string;
declare function stringsPath(path?: string): string;
declare function scriptsPath(path?: string): string;
declare function uiPath(path?: string): string;
declare function utilsPath(path?: string): string;
declare function validationPath(path?: string): string;
declare const path: {
    aiPath: typeof aiPath;
    actionsPath: typeof actionsPath;
    aliasPath: typeof aliasPath;
    arraysPath: typeof arraysPath;
    appPath: typeof appPath;
    authPath: typeof authPath;
    buildEnginePath: typeof buildEnginePath;
    buildEntriesPath: typeof buildEntriesPath;
    buildPath: typeof buildPath;
    cachePath: typeof cachePath;
    chatPath: typeof chatPath;
    cliPath: typeof cliPath;
    cloudPath: typeof cloudPath;
    collectionsPath: typeof collectionsPath;
    componentsPath: typeof componentsPath;
    configPath: typeof configPath;
    userConfigPath: typeof userConfigPath;
    corePath: typeof corePath;
    customElementsDataPath: typeof customElementsDataPath;
    databasePath: typeof databasePath;
    developmentPath: typeof developmentPath;
    dashboardPath: typeof dashboardPath;
    desktopPath: typeof desktopPath;
    docsPath: typeof docsPath;
    domainsPath: typeof domainsPath;
    emailPath: typeof emailPath;
    errorHandlingPath: typeof errorHandlingPath;
    eventsPath: typeof eventsPath;
    healthPath: typeof healthPath;
    examplesPath: typeof examplesPath;
    fakerPath: typeof fakerPath;
    frameworkPath: typeof frameworkPath;
    storagePath: typeof storagePath;
    functionsPath: typeof functionsPath;
    gitPath: typeof gitPath;
    langPath: typeof langPath;
    libraryEntryPath: typeof libraryEntryPath;
    lintPath: typeof lintPath;
    loggingPath: typeof loggingPath;
    modulesPath: typeof modulesPath;
    ormPath: typeof ormPath;
    objectsPath: typeof objectsPath;
    onboardingPath: typeof onboardingPath;
    notificationsPath: typeof notificationsPath;
    packageJsonPath: typeof packageJsonPath;
    pagesPath: typeof pagesPath;
    pathPath: typeof pathPath;
    paymentsPath: typeof paymentsPath;
    projectPath: typeof projectPath;
    pushPath: typeof pushPath;
    queryBuilderPath: typeof queryBuilderPath;
    queuePath: typeof queuePath;
    realtimePath: typeof realtimePath;
    routerPath: typeof routerPath;
    routesPath: typeof routesPath;
    searchEnginePath: typeof searchEnginePath;
    schedulerPath: typeof schedulerPath;
    settingsPath: typeof settingsPath;
    smsPath: typeof smsPath;
    signalsPath: typeof signalsPath;
    scriptsPath: typeof scriptsPath;
    securityPath: typeof securityPath;
    serverPath: typeof serverPath;
    serverlessPath: typeof serverlessPath;
    stacksPath: typeof stacksPath;
    stringsPath: typeof stringsPath;
    tablesPath: typeof tablesPath;
    testingPath: typeof testingPath;
    testsPath: typeof testsPath;
    typesPath: typeof typesPath;
    uiPath: typeof uiPath;
    utilsPath: typeof utilsPath;
    validationPath: typeof validationPath;
    xRayPath: typeof xRayPath;
    basename: (path: string, suffix?: string | undefined) => string;
    delimiter: string;
    dirname: (path: string) => string;
    extname: (path: string) => string;
    format: (pathObject: _path.FormatInputPathObject) => string;
    isAbsolute: (path: string) => boolean;
    join: (...paths: string[]) => string;
    normalize: (path: string) => string;
    normalizeString: typeof normalizeString;
    parse: (path: string) => _path.ParsedPath;
    relative: (from: string, to: string) => string;
    resolve: (...paths: string[]) => string;
    sep: string;
    toNamespacedPath: (path: string) => string;
};

export { actionsPath, aiPath, aliasPath, appPath, arraysPath, authPath, buildEnginePath, buildEntriesPath, buildPath, cachePath, chatPath, cliPath, cloudPath, collectionsPath, componentsPath, configPath, corePath, customElementsDataPath, dashboardPath, databasePath, desktopPath, developmentPath, docsPath, domainsPath, emailPath, errorHandlingPath, eventsPath, examplesPath, fakerPath, frameworkPath, functionsPath, gitPath, healthPath, langPath, libraryEntryPath, lintPath, loggingPath, modelsPath, modulesPath, notificationsPath, objectsPath, onboardingPath, ormPath, packageJsonPath, pagesPath, path, pathPath, paymentsPath, projectPath, pushPath, queryBuilderPath, queuePath, realtimePath, routerPath, routesPath, runtimePath, schedulerPath, scriptsPath, searchEnginePath, securityPath, serverPath, serverlessPath, settingsPath, signalsPath, smsPath, stacksPath, storagePath, stringsPath, tablesPath, testingPath, testsPath, typesPath, uiPath, userConfigPath, utilsPath, validationPath, xRayPath };
